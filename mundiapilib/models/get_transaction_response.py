# -*- coding: utf-8 -*-

"""
    mundiapilib.models.get_transaction_response

    This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io )
"""
from mundiapilib.api_helper import APIHelper
import mundiapilib.models.get_credit_card_response

class GetTransactionResponse(object):

    """Implementation of the 'GetTransactionResponse' model.

    Generic response object for getting a transaction.

    Attributes:
        gateway_id (string): Gateway transaction id
        amount (int): Amount in cents
        status (string): Transaction status
        success (bool): Indicates if the transaction ocurred successfuly
        created_at (datetime): Creation date
        updated_at (datetime): Last update date
        attempt_count (int): Number of attempts tried
        max_attempts (int): Max attempts
        next_attempt (datetime): Date and time of the next attempt
        transaction_type (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "gateway_id" : "gateway_id",
        "amount" : "amount",
        "status" : "status",
        "success" : "success",
        "created_at" : "created_at",
        "updated_at" : "updated_at",
        "attempt_count" : "attempt_count",
        "max_attempts" : "max_attempts",
        "next_attempt" : "next_attempt",
        "transaction_type" : "transaction_type"
    }

    def __init__(self,
                 gateway_id=None,
                 amount=None,
                 status=None,
                 success=None,
                 created_at=None,
                 updated_at=None,
                 attempt_count=None,
                 max_attempts=None,
                 next_attempt=None,
                 transaction_type=None):
        """Constructor for the GetTransactionResponse class"""

        # Initialize members of the class
        self.gateway_id = gateway_id
        self.amount = amount
        self.status = status
        self.success = success
        self.created_at = APIHelper.RFC3339DateTime(created_at) if created_at else None
        self.updated_at = APIHelper.RFC3339DateTime(updated_at) if updated_at else None
        self.attempt_count = attempt_count
        self.max_attempts = max_attempts
        self.next_attempt = APIHelper.RFC3339DateTime(next_attempt) if next_attempt else None
        self.transaction_type = transaction_type


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        discriminators = {
            'boleto': GetBoletoTransactionResponse.from_dictionary,
            'credit_card': GetCreditCardTransactionResponse.from_dictionary
        }
        unboxer = discriminators.get(dictionary.get('transaction_type'))

        # Delegate unboxing to another function if a discriminator
        # value for a child class is present.
        if unboxer:
            return unboxer(dictionary)

        # Extract variables from the dictionary
        gateway_id = dictionary.get("gateway_id")
        amount = dictionary.get("amount")
        status = dictionary.get("status")
        success = dictionary.get("success")
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        attempt_count = dictionary.get("attempt_count")
        max_attempts = dictionary.get("max_attempts")
        next_attempt = APIHelper.RFC3339DateTime.from_value(dictionary.get("next_attempt")).datetime if dictionary.get("next_attempt") else None
        transaction_type = dictionary.get("transaction_type")

        # Return an object of this model
        return cls(gateway_id,
                   amount,
                   status,
                   success,
                   created_at,
                   updated_at,
                   attempt_count,
                   max_attempts,
                   next_attempt,
                   transaction_type)


class GetBoletoTransactionResponse(GetTransactionResponse):

    """Implementation of the 'GetBoletoTransactionResponse' model.

    Response object for getting a boleto transaction
    NOTE: This class inherits from 'GetTransactionResponse'.

    Attributes:
        url (string): TODO: type description here.
        bar_code (string): TODO: type description here.
        nosso_numero (string): TODO: type description here.
        bank (string): TODO: type description here.
        document_number (string): TODO: type description here.
        instructions (string): TODO: type description here.
        transaction_type (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "url" : "url",
        "bar_code" : "bar_code",
        "nosso_numero" : "nosso_numero",
        "bank" : "bank",
        "document_number" : "document_number",
        "instructions" : "instructions",
        "gateway_id" : "gateway_id",
        "amount" : "amount",
        "status" : "status",
        "success" : "success",
        "created_at" : "created_at",
        "updated_at" : "updated_at",
        "attempt_count" : "attempt_count",
        "max_attempts" : "max_attempts",
        "transaction_type" : "transaction_type",
        "transaction_type" : "transaction_type",
        "next_attempt" : "next_attempt"
    }

    def __init__(self,
                 url=None,
                 bar_code=None,
                 nosso_numero=None,
                 bank=None,
                 document_number=None,
                 instructions=None,
                 gateway_id=None,
                 amount=None,
                 status=None,
                 success=None,
                 created_at=None,
                 updated_at=None,
                 attempt_count=None,
                 max_attempts=None,
                 transaction_type=None,
                 transaction_type=None,
                 next_attempt=None):
        """Constructor for the GetBoletoTransactionResponse class"""

        # Initialize members of the class
        self.url = url
        self.bar_code = bar_code
        self.nosso_numero = nosso_numero
        self.bank = bank
        self.document_number = document_number
        self.instructions = instructions
        self.transaction_type = transaction_type

        # Call the constructor for the base class
        super(GetBoletoTransactionResponse, self).__init__(gateway_id,
                                                           amount,
                                                           status,
                                                           success,
                                                           created_at,
                                                           updated_at,
                                                           attempt_count,
                                                           max_attempts,
                                                           next_attempt,
                                                           transaction_type)


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        url = dictionary.get("url")
        bar_code = dictionary.get("bar_code")
        nosso_numero = dictionary.get("nosso_numero")
        bank = dictionary.get("bank")
        document_number = dictionary.get("document_number")
        instructions = dictionary.get("instructions")
        gateway_id = dictionary.get("gateway_id")
        amount = dictionary.get("amount")
        status = dictionary.get("status")
        success = dictionary.get("success")
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        attempt_count = dictionary.get("attempt_count")
        max_attempts = dictionary.get("max_attempts")
        transaction_type = dictionary.get("transaction_type")
        transaction_type = dictionary.get("transaction_type")
        next_attempt = APIHelper.RFC3339DateTime.from_value(dictionary.get("next_attempt")).datetime if dictionary.get("next_attempt") else None

        # Return an object of this model
        return cls(url,
                   bar_code,
                   nosso_numero,
                   bank,
                   document_number,
                   instructions,
                   gateway_id,
                   amount,
                   status,
                   success,
                   created_at,
                   updated_at,
                   attempt_count,
                   max_attempts,
                   transaction_type,
                   transaction_type,
                   next_attempt)


class GetCreditCardTransactionResponse(GetTransactionResponse):

    """Implementation of the 'GetCreditCardTransactionResponse' model.

    Response object for getting a credit card transaction
    NOTE: This class inherits from 'GetTransactionResponse'.

    Attributes:
        statement_descriptor (string): TODO: type description here.
        acquirer (string): TODO: type description here.
        acquirer_affiliation_code (string): TODO: type description here.
        acquirer_tid (string): TODO: type description here.
        acquirer_nsu (string): TODO: type description here.
        acquirer_auth_code (string): TODO: type description here.
        operation_type (string): TODO: type description here.
        credit_card (GetCreditCardResponse): TODO: type description here.
        installments (int): TODO: type description here.
        transaction_type (string): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "statement_descriptor" : "statement_descriptor",
        "acquirer" : "acquirer",
        "acquirer_affiliation_code" : "acquirer_affiliation_code",
        "acquirer_tid" : "acquirer_tid",
        "acquirer_nsu" : "acquirer_nsu",
        "acquirer_auth_code" : "acquirer_auth_code",
        "operation_type" : "operation_type",
        "credit_card" : "credit_card",
        "gateway_id" : "gateway_id",
        "amount" : "amount",
        "status" : "status",
        "success" : "success",
        "created_at" : "created_at",
        "updated_at" : "updated_at",
        "attempt_count" : "attempt_count",
        "max_attempts" : "max_attempts",
        "installments" : "installments",
        "transaction_type" : "transaction_type",
        "transaction_type" : "transaction_type",
        "next_attempt" : "next_attempt"
    }

    def __init__(self,
                 statement_descriptor=None,
                 acquirer=None,
                 acquirer_affiliation_code=None,
                 acquirer_tid=None,
                 acquirer_nsu=None,
                 acquirer_auth_code=None,
                 operation_type=None,
                 credit_card=None,
                 gateway_id=None,
                 amount=None,
                 status=None,
                 success=None,
                 created_at=None,
                 updated_at=None,
                 attempt_count=None,
                 max_attempts=None,
                 installments=None,
                 transaction_type=None,
                 transaction_type=None,
                 next_attempt=None):
        """Constructor for the GetCreditCardTransactionResponse class"""

        # Initialize members of the class
        self.statement_descriptor = statement_descriptor
        self.acquirer = acquirer
        self.acquirer_affiliation_code = acquirer_affiliation_code
        self.acquirer_tid = acquirer_tid
        self.acquirer_nsu = acquirer_nsu
        self.acquirer_auth_code = acquirer_auth_code
        self.operation_type = operation_type
        self.credit_card = credit_card
        self.installments = installments
        self.transaction_type = transaction_type

        # Call the constructor for the base class
        super(GetCreditCardTransactionResponse, self).__init__(gateway_id,
                                                               amount,
                                                               status,
                                                               success,
                                                               created_at,
                                                               updated_at,
                                                               attempt_count,
                                                               max_attempts,
                                                               next_attempt,
                                                               transaction_type)


    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object as
            obtained from the deserialization of the server's response. The keys
            MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        statement_descriptor = dictionary.get("statement_descriptor")
        acquirer = dictionary.get("acquirer")
        acquirer_affiliation_code = dictionary.get("acquirer_affiliation_code")
        acquirer_tid = dictionary.get("acquirer_tid")
        acquirer_nsu = dictionary.get("acquirer_nsu")
        acquirer_auth_code = dictionary.get("acquirer_auth_code")
        operation_type = dictionary.get("operation_type")
        credit_card = mundiapilib.models.get_credit_card_response.GetCreditCardResponse.from_dictionary(dictionary.get("credit_card")) if dictionary.get("credit_card") else None
        gateway_id = dictionary.get("gateway_id")
        amount = dictionary.get("amount")
        status = dictionary.get("status")
        success = dictionary.get("success")
        created_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("created_at")).datetime if dictionary.get("created_at") else None
        updated_at = APIHelper.RFC3339DateTime.from_value(dictionary.get("updated_at")).datetime if dictionary.get("updated_at") else None
        attempt_count = dictionary.get("attempt_count")
        max_attempts = dictionary.get("max_attempts")
        installments = dictionary.get("installments")
        transaction_type = dictionary.get("transaction_type")
        transaction_type = dictionary.get("transaction_type")
        next_attempt = APIHelper.RFC3339DateTime.from_value(dictionary.get("next_attempt")).datetime if dictionary.get("next_attempt") else None

        # Return an object of this model
        return cls(statement_descriptor,
                   acquirer,
                   acquirer_affiliation_code,
                   acquirer_tid,
                   acquirer_nsu,
                   acquirer_auth_code,
                   operation_type,
                   credit_card,
                   gateway_id,
                   amount,
                   status,
                   success,
                   created_at,
                   updated_at,
                   attempt_count,
                   max_attempts,
                   installments,
                   transaction_type,
                   transaction_type,
                   next_attempt)


